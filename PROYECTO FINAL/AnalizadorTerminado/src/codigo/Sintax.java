//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 28 03:05:23 MST 2022
//----------------------------------------------------
package codigo;

import java_cup.runtime.Symbol;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Mon Mar 28 03:05:23 MST 2022
 */
public class Sintax extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public Sintax() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintax(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\012\000\002\002\004\000\002\002\011\000\002\002"
        + "\011\000\002\003\004\000\002\003\003\000\002\003\004"
        + "\000\002\003\003\000\002\004\005\000\002\004\006\000"
        + "\002\004\007"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\037\000\006\007\004\010\005\001\002\000\004\050"
        + "\034\001\002\000\004\050\010\001\002\000\004\002\007"
        + "\001\002\000\004\002\001\001\002\000\004\046\011\001"
        + "\002\000\004\047\012\001\002\000\004\044\013\001\002"
        + "\000\010\007\014\014\020\051\017\001\002\000\004\051"
        + "\030\001\002\000\012\007\ufffd\014\ufffd\045\ufffd\051\ufffd"
        + "\001\002\000\012\007\014\014\027\045\026\051\017\001"
        + "\002\000\004\052\021\001\002\000\012\007\ufffb\014\ufffb"
        + "\045\ufffb\051\ufffb\001\002\000\004\026\022\001\002\000"
        + "\004\052\023\001\002\000\004\040\024\001\002\000\012"
        + "\007\ufff8\014\ufff8\045\ufff8\051\ufff8\001\002\000\012\007"
        + "\ufffe\014\ufffe\045\ufffe\051\ufffe\001\002\000\004\002\uffff"
        + "\001\002\000\012\007\ufffc\014\ufffc\045\ufffc\051\ufffc\001"
        + "\002\000\006\040\032\052\031\001\002\000\004\040\033"
        + "\001\002\000\012\007\ufffa\014\ufffa\045\ufffa\051\ufffa\001"
        + "\002\000\012\007\ufff9\014\ufff9\045\ufff9\051\ufff9\001\002"
        + "\000\004\046\035\001\002\000\004\047\036\001\002\000"
        + "\004\044\037\001\002\000\010\007\014\014\020\051\017"
        + "\001\002\000\012\007\014\014\027\045\041\051\017\001"
        + "\002\000\004\002\000\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\037\000\004\002\005\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\006\003"
        + "\015\004\014\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\004\024\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\006\003\037\004\014\001\001"
        + "\000\004\004\024\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Sintax$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Sintax$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    private Symbol s;

    public void syntax_error(Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$Sintax$actions {

    private final Sintax parser;

    /**
     * Constructor
     */
    CUP$Sintax$actions(Sintax parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$Sintax$do_action(
            int CUP$Sintax$act_num,
            java_cup.runtime.lr_parser CUP$Sintax$parser,
            java.util.Stack CUP$Sintax$stack,
            int CUP$Sintax$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$Sintax$result;

        /* select the action based on the action number */
        switch (CUP$Sintax$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // DECLARACION ::= Identificador Numero Multiplicacion Numero Punto_Y_Coma 
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION", 2, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // DECLARACION ::= Dato_Entero Identificador Numero Punto_Y_Coma 
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION", 2, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // DECLARACION ::= Dato_Entero Identificador Punto_Y_Coma 
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION", 2, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // SENTENCIA ::= If 
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 1, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // SENTENCIA ::= SENTENCIA If 
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 1, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // SENTENCIA ::= DECLARACION 
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 1, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 1, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // INICIO ::= Dato_Double Main Parentesis_Inicial Parentesis_Final Llave_Inicial SENTENCIA Llave_Final 
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO", 0, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // INICIO ::= Dato_Entero Main Parentesis_Inicial Parentesis_Final Llave_Inicial SENTENCIA Llave_Final 
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO", 0, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= INICIO EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                RESULT = start_val;
                CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$Sintax$parser.done_parsing();
            return CUP$Sintax$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");
        }
    }
}
//JOSÉ ALFREDO GARCÍA AGUILAR
//LENGUAJES Y AUTÓMATAS II - 12-1PM